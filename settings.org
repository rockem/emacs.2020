#+TITLE: 2020 Settings

* Evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
     :ensure t
     :config
     (evil-mode))
#+END_SRC 
* Bootstrap
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq echo-keystrokes 0.1
        use-dialog-box nil)

  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file))

  (global-set-key (kbd "C-x C-l") 'reload-init-file) 

  (defalias 'list-buffers 'ibuffer-other-window)


  (use-package diminish
    :ensure t)
  ;; it looks like counsel is a requirement for swiper
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

      (use-package ace-window
        :ensure t
        :init
        (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
           '(aw-leading-char-face
             ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
          ))
    (use-package company               
      :ensure t
      :defer t
      :init (global-company-mode)
      :config
      (progn
        ;; Use Company for completion
        (bind-key [remap completion-at-point] #'company-complete company-mode-map)

        (setq company-tooltip-align-annotations t
              ;; Easy navigation to candidates with M-<n>
              company-show-numbers t)
        (setq company-dabbrev-downcase nil))
      :diminish company-mode)

#+END_SRC
* Display
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)

(use-package all-the-icons)

  (use-package kaolin-themes
    :config
    (load-theme 'kaolin-dark t))

  (if window-system
      (progn (tool-bar-mode -1)
             (desktop-save-mode 1)))
             ;; (load-theme 'tsdh-light)
             ;; (set-background-color "#FFFDFC")))

  (when (member "Menlo" (font-family-list)) (set-frame-font "Menlo-14" t))
  (global-hl-line-mode 1)
  ;; (set-face-background 'hl-line "#FFF3E1")

  ;; Indicate empty lines
  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)  
    (toggle-indicate-empty-lines))

  (show-paren-mode t)

  (setq-default display-line-numbers-type 'visual
                display-line-numbers-current-absolute t
                display-line-numbers-width 4
                display-line-numbers-widen t)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Subtle flash on error
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))
 #+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))

  (setq org-log-done t
        org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
        org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))
  (add-hook 'org-mode-hook
            (lambda ()
              (flyspell-mode)))

  (use-package writegood-mode
    :ensure t
    :config  
    (add-hook 'org-mode-hook
              (lambda ()
                (writegood-mode))))

  (setq org-src-tab-acts-natively t)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

  (global-set-key (kbd "C-x g") 'magit-status)

  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode t))

  (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
  (add-hook 'with-editor-mode-hook 'evil-insert-state)
#+END_SRC
* Language Support
** CSV 
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.csv$" . csv-mode)))
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :pin melpa-stable)

  (add-hook 'clojure-mode-hook 'prettify-symbols-mode)
  
  (use-package clojure-mode
    :mode (("\\.edn$" . clojure-mode))
    :config
    (progn
      (setq clojure-align-forms-automatically t)))
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
  (when (memq window-system '(mac ns))
    (setenv "SHELL" "/bin/zsh")
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs
     '("PATH")))
#+END_SRC
